{"version":3,"sources":["withDimensions.tsx"],"names":["isOrientationLandscape","width","height","withDimensions","WrappedComponent","EnhancedComponent","props","handleOrientationChange","window","setState","dimensions","isLandscape","Dimensions","get","state","removeOrientationListener","addEventListener","React","Component","displayName"],"mappings":"g1BAAA,oDACA,yCACA,qF,kGAYO,GAAMA,CAAAA,sBAAsB,CAAG,QAAzBA,CAAAA,sBAAyB,UAAGC,CAAAA,KAAH,MAAGA,KAAH,CAAUC,MAAV,MAAUA,MAAV,OACpCD,CAAAA,KAAK,CAAGC,MAD4B,EAA/B,C,sDAGQ,QAASC,CAAAA,cAAT,CACbC,gBADa,CAEgE,IACvEC,CAAAA,iBADuE,uFAK3E,2BAAYC,KAAZ,CAA0B,gEACxB,6GAAMA,KAAN,GADwB,MAoB1BC,uBApB0B,CAoBA,eAAwC,IAArCC,CAAAA,MAAqC,OAArCA,MAAqC,IACxDP,CAAAA,KADwD,CACtCO,MADsC,CACxDP,KADwD,CACjDC,MADiD,CACtCM,MADsC,CACjDN,MADiD,CAEhE,MAAKO,QAAL,CAAc,CACZC,UAAU,CAAE,CAAET,KAAK,CAALA,KAAF,CAASC,MAAM,CAANA,MAAT,CADA,CAEZS,WAAW,CAAEX,sBAAsB,CAAC,CAAEC,KAAK,CAALA,KAAF,CAASC,MAAM,CAANA,MAAT,CAAD,CAFvB,CAAd,EAID,CA1ByB,qBAGEU,wBAAWC,GAAX,CAAe,QAAf,CAHF,CAGhBZ,MAHgB,iBAGhBA,KAHgB,CAGTC,OAHS,iBAGTA,MAHS,CAIxB,MAAKY,KAAL,CAAa,CACXJ,UAAU,CAAE,CAAET,KAAK,CAALA,MAAF,CAASC,MAAM,CAANA,OAAT,CADD,CAEXS,WAAW,CAAEX,sBAAsB,CAAC,CAAEC,KAAK,CAALA,MAAF,CAASC,MAAM,CAANA,OAAT,CAAD,CAFxB,CAAb,CAJwB,aAQzB,CAb0E,wGAevD,CAClB,KAAKa,yBAAL,CAAiCH,wBAAWI,gBAAX,CAA4B,QAA5B,CAAsC,KAAKT,uBAA3C,CAAjC,CACD,CAjB0E,mEAmBpD,CACrB,GAAI,KAAKQ,yBAAT,CAAoC,CAClC,KAAKA,yBAAL,GACD,CACF,CAvB0E,uCAiClE,CAEP,MAAO,qBAAC,gBAAD,0BAAsB,KAAKT,KAA3B,CAAsC,KAAKQ,KAA3C,mDAAP,CACD,CApC0E,+BAC7CG,KAAK,CAACC,SADuC,EACvEb,iBADuE,CAEpEc,WAFoE,mBAEpCf,gBAAgB,CAACe,WAFmB,KAwC7E,MAAO,kCAAoBd,iBAApB,CAAuCD,gBAAvC,CAAP,CACD","sourcesContent":["import * as React from 'react';\nimport { Dimensions, ScaledSize } from 'react-native';\nimport hoistNonReactStatic from 'hoist-non-react-statics';\n\ntype DimensionsType = {\n  width: number;\n  height: number;\n};\n\ntype InjectedProps = {\n  dimensions: DimensionsType;\n  isLandscape: boolean;\n};\n\nexport const isOrientationLandscape = ({ width, height }: DimensionsType) =>\n  width > height;\n\nexport default function withDimensions<Props extends InjectedProps>(\n  WrappedComponent: React.ComponentType<Props>\n): React.ComponentType<Pick<Props, Exclude<keyof Props, keyof InjectedProps>>> {\n  class EnhancedComponent extends React.Component {\n    static displayName = `withDimensions(${WrappedComponent.displayName})`;\n    removeOrientationListener: any;\n\n    constructor(props: Props) {\n      super(props);\n\n      const { width, height } = Dimensions.get('window');\n      this.state = {\n        dimensions: { width, height },\n        isLandscape: isOrientationLandscape({ width, height }),\n      };\n    }\n\n    componentDidMount() {\n      this.removeOrientationListener = Dimensions.addEventListener('change', this.handleOrientationChange);\n    }\n\n    componentWillUnmount() {\n      if (this.removeOrientationListener) {\n        this.removeOrientationListener();\n      }\n    }\n\n    handleOrientationChange = ({ window }: { window: ScaledSize }) => {\n      const { width, height } = window;\n      this.setState({\n        dimensions: { width, height },\n        isLandscape: isOrientationLandscape({ width, height }),\n      });\n    };\n\n    render() {\n      // @ts-ignore\n      return <WrappedComponent {...this.props} {...this.state} />;\n    }\n  }\n\n  // @ts-ignore\n  return hoistNonReactStatic(EnhancedComponent, WrappedComponent);\n}\n"]}